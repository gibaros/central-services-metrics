{"version":3,"file":"metrics.js","sourceRoot":"","sources":["../src/metrics.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;QA0BQ;AAER,YAAY,CAAA;;AAEZ,sCAAsC;AAwBtC,qCAAqC;AACrC,MAAM,OAAO;IAAb;QACI,8CAA8C;QACtC,kBAAa,GAAY,KAAK,CAAA;QAEtC,6CAA6C;QACrC,gBAAW,GAAmB,EAAE,CAAA;QAExC,sCAAsC;QAC9B,aAAQ,GAAsB,EAAE,MAAM,EAAE,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,CAAA;QAEhE;;WAEG;QACH,UAAK,GAAG,CAAC,OAA0B,EAAW,EAAE;YAC5C,IAAI,IAAI,CAAC,eAAe,EAAE,EAAE;gBACxB,OAAO,KAAK,CAAA;aACf;YACD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAA;YACvB,wEAAwE;YACxE,IAAI,iBAAiB,GAAgC;gBACjD,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM;gBAC5B,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO;aACjC,CAAA;YACD,IAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,KAAK,SAAS,EAAC;gBACzC,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAA;aAChE;YACD,MAAM,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,CAAA;YAC/C,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAA;YACzB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAA;YACzB,OAAO,IAAI,CAAA;QACf,CAAC,CAAA;QAED;;WAEG;QACH,iBAAY,GAAG,CAAC,IAAY,EAAE,IAAa,EAAE,UAAqB,EAAE,UAAoB,CAAC,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAoB,EAAE;YAC3I,IAAI;gBACA,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;oBACxB,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA;iBAChC;gBACD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI,MAAM,CAAC,SAAS,CAAC;oBAC1C,IAAI,EAAE,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,MAAM,GAAG,IAAI,EAAE;oBAC1C,IAAI,EAAE,IAAI,IAAI,GAAG,IAAI,YAAY;oBACjC,UAAU;oBACV,OAAO,CAAC,oFAAoF;iBAC/F,CAAC,CAAA;gBACF,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA;aAChC;YAAC,OAAO,CAAC,EAAE;gBACR,MAAM,IAAI,KAAK,CAAC,sCAAsC,IAAI,EAAE,CAAC,CAAA;aAChE;QACL,CAAC,CAAA;QAED;;WAEG;QACH,4BAAuB,GAAG,GAAW,EAAE;YACnC,OAAO,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAA;QACpC,CAAC,CAAA;QAED;;WAEG;QACH,eAAU,GAAG,GAAsB,EAAE;YACjC,OAAO,IAAI,CAAC,QAAQ,CAAA;QACxB,CAAC,CAAA;QAED;;WAEG;QACH,oBAAe,GAAG,GAAY,EAAE;YAC5B,OAAO,IAAI,CAAC,aAAa,CAAA;QAC7B,CAAC,CAAA;IACL,CAAC;CAAA;AAGG,0BAAO","sourcesContent":["/*****\n License\n --------------\n Copyright Â© 2017 Bill & Melinda Gates Foundation\n The Mojaloop files are made available by the Bill & Melinda Gates Foundation under the Apache License, Version 2.0 (the \"License\") and you may not use these files except in compliance with the License. You may obtain a copy of the License at\n http://www.apache.org/licenses/LICENSE-2.0\n Unless required by applicable law or agreed to in writing, the Mojaloop files are distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n Contributors\n --------------\n This is the official list of the Mojaloop project contributors for this file.\n Names of the original copyright holders (individuals or organizations)\n should be listed with a '*' in the first column. People who have\n contributed from an organization can be listed under the organization\n that actually holds the copyright for their contributions (see the\n Gates Foundation organization for an example). Those individuals should have\n their names indented and be marked with a '-'. Email address can be added\n optionally within square brackets <email>.\n * Gates Foundation\n - Name Surname <name.surname@gatesfoundation.com>\n\n - Pedro Barreto <pedrob@crosslaketech.com>\n - Rajiv Mothilal <rajivmothilal@gmail.com>\n - Miguel de Barros <miguel.debarros@modusbox.com>\n - Shashikant Hirugade <shashikant.hirugade@modusbox.com>\n\n --------------\n ******/\n\n'use strict'\n\nimport client = require('prom-client')\n\n/**\n * Type that represents the options that are required for setup\n */\ntype metricOptionsType = {\n    timeout: number,\n    prefix: string,\n    defaultLabels?: Map<string, string>\n}\n\n/**\n * Type that represents the options that are required to setup the prom-client specifically\n */\ntype normalisedMetricOptionsType = {\n    timeout: number,\n    prefix: string\n}\n\n/**\n * Object that holds the histogram values\n */\ntype histogramsType = { [key: string]: client.Histogram }\n\n/** Wrapper class for prom-client. */\nclass Metrics {\n    /** To make sure the setup is run only once */\n    private _alreadySetup: boolean = false\n\n    /** Object containing the histogram values */\n    private _histograms: histogramsType = {}\n\n    /** The options passed to the setup */\n    private _options: metricOptionsType = { prefix: '', timeout: 0 }\n\n    /**\n     * Setup the prom client for collecting metrics using the options passed\n     */\n    setup = (options: metricOptionsType): boolean => {\n        if (this.getAlreadySetup()) {\n            return false\n        }\n        this._options = options\n        // map the options to the normalised options specific to the prom-client\n        let normalisedOptions: normalisedMetricOptionsType = {\n            prefix: this._options.prefix,\n            timeout: this._options.timeout\n        }\n        if(this._options.defaultLabels !== undefined){\n            client.register.setDefaultLabels(this._options.defaultLabels)\n        }\n        client.collectDefaultMetrics(normalisedOptions)\n        client.register.metrics()\n        this._alreadySetup = true\n        return true\n    }\n\n    /**\n     * Get the histogram values for given name\n     */\n    getHistogram = (name: string, help?: string, labelNames?: string[], buckets: number[] = [0.010, 0.050, 0.1, 0.5, 1, 2, 5]): client.Histogram => {\n        try {\n            if (this._histograms[name]) {\n                return this._histograms[name]\n            }\n            this._histograms[name] = new client.Histogram({\n                name: `${this.getOptions().prefix}${name}`,\n                help: help || `${name}_histogram`,\n                labelNames,\n                buckets // this is in seconds - the startTimer().end() collects in seconds with ms precision\n            })\n            return this._histograms[name]\n        } catch (e) {\n            throw new Error(`Couldn't get metrics histogram for ${name}`)\n        }\n    }\n\n    /**\n     * Get the metrics\n     */\n    getMetricsForPrometheus = (): string => {\n        return client.register.metrics()\n    }\n\n    /**\n     * Get the options that are used to setup the prom-client\n     */\n    getOptions = (): metricOptionsType => {\n        return this._options\n    }\n\n    /**\n     * Get the alreadySetup that is used to make sure the setup is run only once\n     */\n    getAlreadySetup = (): boolean => {\n        return this._alreadySetup\n    }\n}\n\nexport {\n    Metrics,\n    metricOptionsType\n}\n"]}